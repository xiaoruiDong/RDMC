import pytest

import numpy as np
from rdkit.Chem import rdChemReactions

from rdtools.conf import add_conformer
from rdtools.conversion import mol_from_smiles
from rdtools.reaction.draw import draw_reaction
from rdtools.reaction.stereo import is_DA_rxn_endo


@pytest.mark.parametrize(
    "smi",
    [
        "[CH3:1][CH3:2]>>[CH2:1]=[CH2:2].[H:3][H:4]",
        "[C:1]([C:2]([H:4])([H:7])[H:8])([H:3])([H:5])[H:6]>>"
        "[C:1](=[C:2]([H:7])[H:8])([H:5])[H:6].[H:3][H:4]",
    ]
)
@pytest.mark.parametrize(
    "figsize", [(800, 300), (400, 400)]
)
@pytest.mark.parametrize(
    "font_scale", [0.5, 1.0, 2.0]
)
@pytest.mark.parametrize(
    "highlight_atoms", [True, False]
)
def test_draw_reaction(smi, figsize, font_scale, highlight_atoms):
    """
    Test issue-free in the workflow drawing a reaction
    """
    rxn = rdChemReactions.ReactionFromSmarts(
        smi,
        useSmiles=True,
    )
    draw_reaction(rxn, figsize, font_scale, highlight_atoms)


@pytest.mark.parametrize(
    "rsmi, psmi, xyz, is_endo",
    [
        (
            '[C:1]1([H:11])=[C:2]([H:20])[C:3]([H:18])([H:19])[C:4]([H:17])=[C:5]1[H:16]'
            '.[C:6]1([H:14])=[C:10]([H:15])[C:9]([H:21])([H:22])[C:8]([H:12])=[C:7]1[H:13]',
            '[C:1]1([H:11])=[C:2]([H:20])[C:3]([H:18])([H:19])[C:4]2([H:17])[C:5]1([H:16])'
            '[C:10]1([H:15])[C:6]([H:14])=[C:7]([H:13])[C:8]2([H:12])[C:9]1([H:21])[H:22]',
            np.array(
                [[ 1.58239292,  0.947867  ,  0.87011527],
                [ 2.32720041,  0.47186454, -0.11298323],
                [ 1.62508288, -0.65470284, -0.80223801],
                [ 0.41826859, -0.97342439,  0.00722794],
                [ 0.31604545,  0.20793456,  0.95216726],
                [-2.08573637,  0.23070767,  0.90785504],
                [-1.99538695, -0.92569041,  0.23619053],
                [-0.88051625, -0.85977855, -0.74686039],
                [-0.87772573,  0.65916647, -1.00250775],
                [-0.88298583,  1.0043838 ,  0.49522599],
                [ 1.8727404 ,  1.77410049,  1.52545979],
                [-0.98415808, -1.45098692, -1.62581691],
                [-2.63182746, -1.78593942,  0.37821339],
                [-2.86095707,  0.55081113,  1.60571287],
                [-0.8833314 ,  2.04222842,  0.71265003],
                [ 0.17183746, -0.1453118 ,  2.01181012],
                [ 0.47983332, -1.93604015,  0.53157701],
                [ 2.33567944, -1.53024826, -0.7173578 ],
                [ 1.41789586, -0.44559368, -1.86196459],
                [ 3.30628381,  0.85878014, -0.3662394 ],
                [-1.79557123,  0.96315794, -1.49906233],
                [ 0.02493581,  0.99671425, -1.49917481]]
            ),
            False,
        ),
        (
            '[C:1]1([H:11])=[C:2]([H:20])[C:3]([H:18])([H:19])[C:4]2([H:17])[C:5]1([H:16])'
            '[C:10]1([H:15])[C:6]([H:14])=[C:7]([H:13])[C:8]2([H:12])[C:9]1([H:21])[H:22]',
            '[C:1]1([H:11])=[C:2]([H:20])[C:3]([H:18])([H:19])[C:4]([H:17])=[C:5]1[H:16]'
            '.[C:6]1([H:14])=[C:10]([H:15])[C:9]([H:21])([H:22])[C:8]([H:12])=[C:7]1[H:13]',
            np.array(
                [[ 1.58239292,  0.947867  ,  0.87011527],
                [ 2.32720041,  0.47186454, -0.11298323],
                [ 1.62508288, -0.65470284, -0.80223801],
                [ 0.41826859, -0.97342439,  0.00722794],
                [ 0.31604545,  0.20793456,  0.95216726],
                [-2.08573637,  0.23070767,  0.90785504],
                [-1.99538695, -0.92569041,  0.23619053],
                [-0.88051625, -0.85977855, -0.74686039],
                [-0.87772573,  0.65916647, -1.00250775],
                [-0.88298583,  1.0043838 ,  0.49522599],
                [ 1.8727404 ,  1.77410049,  1.52545979],
                [-0.98415808, -1.45098692, -1.62581691],
                [-2.63182746, -1.78593942,  0.37821339],
                [-2.86095707,  0.55081113,  1.60571287],
                [-0.8833314 ,  2.04222842,  0.71265003],
                [ 0.17183746, -0.1453118 ,  2.01181012],
                [ 0.47983332, -1.93604015,  0.53157701],
                [ 2.33567944, -1.53024826, -0.7173578 ],
                [ 1.41789586, -0.44559368, -1.86196459],
                [ 3.30628381,  0.85878014, -0.3662394 ],
                [-1.79557123,  0.96315794, -1.49906233],
                [ 0.02493581,  0.99671425, -1.49917481]]
            ),
            False,
        ),
        (
            '[C:1]1([H:11])=[C:2]([H:20])[C:3]([H:18])([H:19])[C:4]([H:17])=[C:5]1[H:16]'
            '.[C:6]1([H:14])=[C:10]([H:15])[C:9]([H:21])([H:22])[C:8]([H:12])=[C:7]1[H:13]',
            '[C:1]1([H:11])=[C:2]([H:20])[C:3]([H:18])([H:19])[C:4]2([H:17])[C:5]1([H:16])'
            '[C:10]1([H:15])[C:6]([H:14])=[C:7]([H:13])[C:8]2([H:12])[C:9]1([H:21])[H:22]',
            np.array(
                [[ 1.13381571,  1.30804996, -0.17827677],
                [ 1.93642874,  0.61022954,  0.61715822],
                [ 1.76593412, -0.825791  ,  0.38732069],
                [ 0.52091035, -0.96773407, -0.38432868],
                [ 0.32963782,  0.40412658, -1.03668264],
                [-1.25859611,  1.18129307,  0.598585  ],
                [-0.92830933,  0.09603857,  1.32746642],
                [-0.73714783, -1.08295044,  0.41145555],
                [-1.73051338, -0.65932017, -0.69240543],
                [-1.12275483,  0.75228611, -0.81359293],
                [ 1.12135041,  2.38966919, -0.14961674],
                [-0.96295141, -2.02970422,  0.84769361],
                [-0.83571677,  0.14826557,  2.39754338],
                [-1.55713166,  2.15185506,  0.95521916],
                [-1.58555748,  1.36307755, -1.54958993],
                [ 0.62437355,  0.40236537, -2.08418116],
                [ 0.51847919, -1.7721312 , -1.14224225],
                [ 2.62337775, -1.16189955, -0.26031514],
                [ 1.82627808, -1.43688551,  1.30597398],
                [ 2.64594702,  1.0073441 ,  1.35928412],
                [-1.57410198, -1.24748921, -1.59810209],
                [-2.75375195, -0.63069527, -0.31836636]]
            ),
            True,
        ),
    ]
)
def test_is_DA_rxn_endo(rsmi, psmi, xyz, is_endo):

    rmol = mol_from_smiles(rsmi)
    pmol = mol_from_smiles(psmi)

    if '.' in rsmi:  # diene and dienophile side
        add_conformer(pmol, coords=xyz)
    else:
        add_conformer(rmol, coords=xyz)

    assert is_endo == is_DA_rxn_endo(rmol, pmol)
